/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables;


import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Dealers;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Keys;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.records.LevelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Level extends TableImpl<LevelRecord> {

    private static final long serialVersionUID = -535196721;

    /**
     * The reference instance of <code>dealers.level</code>
     */
    public static final Level LEVEL = new Level();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LevelRecord> getRecordType() {
        return LevelRecord.class;
    }

    /**
     * The column <code>dealers.level.id</code>.
     */
    public final TableField<LevelRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dealers.level_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dealers.level.hierarchical_level</code>.
     */
    public final TableField<LevelRecord, Integer> HIERARCHICAL_LEVEL = createField(DSL.name("hierarchical_level"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dealers.level.description</code>.
     */
    public final TableField<LevelRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dealers.level.main_channel_id</code>.
     */
    public final TableField<LevelRecord, Integer> MAIN_CHANNEL_ID = createField(DSL.name("main_channel_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>dealers.level</code> table reference
     */
    public Level() {
        this(DSL.name("level"), null);
    }

    /**
     * Create an aliased <code>dealers.level</code> table reference
     */
    public Level(String alias) {
        this(DSL.name(alias), LEVEL);
    }

    /**
     * Create an aliased <code>dealers.level</code> table reference
     */
    public Level(Name alias) {
        this(alias, LEVEL);
    }

    private Level(Name alias, Table<LevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Level(Name alias, Table<LevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Level(Table<O> child, ForeignKey<O, LevelRecord> key) {
        super(child, key, LEVEL);
    }

    @Override
    public Schema getSchema() {
        return Dealers.DEALERS;
    }

    @Override
    public Identity<LevelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LEVEL;
    }

    @Override
    public UniqueKey<LevelRecord> getPrimaryKey() {
        return Keys.LEVEL_PKEY;
    }

    @Override
    public List<UniqueKey<LevelRecord>> getKeys() {
        return Arrays.<UniqueKey<LevelRecord>>asList(Keys.LEVEL_PKEY);
    }

    @Override
    public List<ForeignKey<LevelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LevelRecord, ?>>asList(Keys.LEVEL__LEVEL_MAIN_CHANNEL_ID_FKEY);
    }

    public Channel channel() {
        return new Channel(this, Keys.LEVEL__LEVEL_MAIN_CHANNEL_ID_FKEY);
    }

    @Override
    public Level as(String alias) {
        return new Level(DSL.name(alias), this);
    }

    @Override
    public Level as(Name alias) {
        return new Level(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Level rename(String name) {
        return new Level(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Level rename(Name name) {
        return new Level(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
