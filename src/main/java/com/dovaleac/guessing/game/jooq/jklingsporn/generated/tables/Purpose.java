/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables;


import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Dealers;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Keys;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.records.PurposeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purpose extends TableImpl<PurposeRecord> {

    private static final long serialVersionUID = -2081118261;

    /**
     * The reference instance of <code>dealers.purpose</code>
     */
    public static final Purpose PURPOSE = new Purpose();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurposeRecord> getRecordType() {
        return PurposeRecord.class;
    }

    /**
     * The column <code>dealers.purpose.id</code>.
     */
    public final TableField<PurposeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dealers.purpose_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dealers.purpose.name</code>.
     */
    public final TableField<PurposeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>dealers.purpose</code> table reference
     */
    public Purpose() {
        this(DSL.name("purpose"), null);
    }

    /**
     * Create an aliased <code>dealers.purpose</code> table reference
     */
    public Purpose(String alias) {
        this(DSL.name(alias), PURPOSE);
    }

    /**
     * Create an aliased <code>dealers.purpose</code> table reference
     */
    public Purpose(Name alias) {
        this(alias, PURPOSE);
    }

    private Purpose(Name alias, Table<PurposeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purpose(Name alias, Table<PurposeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Purpose(Table<O> child, ForeignKey<O, PurposeRecord> key) {
        super(child, key, PURPOSE);
    }

    @Override
    public Schema getSchema() {
        return Dealers.DEALERS;
    }

    @Override
    public Identity<PurposeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PURPOSE;
    }

    @Override
    public UniqueKey<PurposeRecord> getPrimaryKey() {
        return Keys.PURPOSE_PKEY;
    }

    @Override
    public List<UniqueKey<PurposeRecord>> getKeys() {
        return Arrays.<UniqueKey<PurposeRecord>>asList(Keys.PURPOSE_PKEY);
    }

    @Override
    public Purpose as(String alias) {
        return new Purpose(DSL.name(alias), this);
    }

    @Override
    public Purpose as(Name alias) {
        return new Purpose(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purpose rename(String name) {
        return new Purpose(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purpose rename(Name name) {
        return new Purpose(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
