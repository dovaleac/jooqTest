buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.13.4'
        classpath 'org.postgresql:postgresql:42.2.2'
        classpath 'io.github.jklingsporn:vertx-jooq-generate:5.2.0'
        classpath 'io.github.jklingsporn:vertx-jooq-rx-reactive:5.2.0'
        classpath 'javax.xml.bind:jaxb-api:2.3.0'
        classpath 'javax.activation:activation:1.1'
        classpath 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
        classpath 'org.jooq:jooq:3.11.12'
    }
}


plugins {
    id 'java'
    //id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.21"
}

project.ext {
    cucumberVersion = '4.2.0'
    dagger = '2.22.1'
    vertx = '3.8.5'
    junit = '5.3.2'
    mockito = '2.23.0'

    vertx_jooq_version = '5.2.0'
    postgresql_version = '42.2.2'
}


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
//    compile "io.cucumber:cucumber-java:${cucumberVersion}"
//    compile "io.cucumber:cucumber-java8:${cucumberVersion}"
//    compile "io.cucumber:cucumber-core:${cucumberVersion}"
//    compile "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "com.google.dagger:dagger:${dagger}"
    implementation "io.vertx:vertx-config-yaml:${vertx}"
    implementation "io.vertx:vertx-config:${vertx}"
    implementation "io.vertx:vertx-core:${vertx}"
    implementation "io.vertx:vertx-rx-java2:${vertx}"
    implementation "io.vertx:vertx-web:${vertx}"
    implementation "io.vertx:vertx-web-client:${vertx}"
    implementation "org.mockito:mockito-junit-jupiter:${mockito}"
    implementation "io.vertx:vertx-micrometer-metrics:${vertx}"
    implementation 'io.micrometer:micrometer-registry-prometheus:latest.release'



    testImplementation "io.vertx:vertx-junit5:${vertx}"

    implementation "io.github.jklingsporn:vertx-jooq-generate:${vertx_jooq_version}"
    implementation "org.postgresql:postgresql:${postgresql_version}"
    implementation "io.github.jklingsporn:vertx-jooq-rx-reactive:${vertx_jooq_version}"
    implementation "org.jooq:jooq:3.13.3"
    implementation "org.jooq:jooq-codegen:3.13.4"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${vertx}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${vertx}"
    annotationProcessor "com.google.dagger:dagger-compiler:${dagger}"
}

group = 'com.masmovil.masdealer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

java {
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    unit {
        java {
            srcDir 'test/unit'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    acceptance {
        java {
            srcDir 'test/acceptance/java'
        }
        resources {
            srcDir 'test/acceptance/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task acceptance() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output +
                    sourceSets.acceptance.output + sourceSets.unit.runtimeClasspath +
                    sourceSets.acceptance.runtimeClasspath
            args = ['--plugin', 'pretty',
                    '--plugin', 'json:cucumber.json',
                    '--glue', 'com.masmovil.mascommissions.pokemon.stepDefinitions', 'src/test/acceptance/resources']
        }
    }
}

task jooqGenerate {
    doLast() {
        def writer = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.13.0.xsd') {
                    jdbc() {
                        driver('org.postgresql.Driver')
                        url('jdbc:postgresql://localhost:5432/jooq_test')
                        user('pablogonzalez')
                        password('deadler')
                    }
                    generator() {
                        name('io.github.jklingsporn.vertx.jooq.generate.rx.RXReactiveVertxGenerator')
                        database {
                            name('org.jooq.meta.postgres.PostgresDatabase')
                            include('.*')
                            excludes('schema_version')
                            inputSchema('dealers')
                            includeTables(true)
                            includeRoutines(false)
                            //includePackages(false)
                            //includeUDTs(true)
                            //includeSequences(true)
                        }
                        generate() {
                            //deprecated(false)
                            //records(true)
                            interfaces(true)
                            fluentSetters(true)
                            //pojos(true)
                            daos(true)
                        }
                        target() {
                            packageName('com.dovaleac.guessing.game.jooq.jklingsporn.generated')
                            directory("$projectDir/src/main/java")
                        }
                        strategy {
                            name('io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy')
                        }
                    }
                }
        org.jooq.codegen.GenerationTool.generate(
                javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.meta.jaxb.Configuration.class)
        )
    }
}


/*
cucumberReports {
    outputDir = file('cucumber-report')
    buildId = '0'
    reports = files('cucumber.json')
}
*/