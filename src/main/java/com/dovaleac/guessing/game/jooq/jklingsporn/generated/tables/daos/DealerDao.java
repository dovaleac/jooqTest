/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.daos;


import com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.Dealer;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.records.DealerRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DealerDao extends AbstractReactiveVertxDAO<DealerRecord, com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer, Integer, Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>>, Single<Optional<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<DealerRecord,com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer,Integer> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public DealerDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
        super(Dealer.DEALER, com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer.class, new ReactiveRXQueryExecutor<DealerRecord,com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer,Integer>(configuration,delegate,com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.mappers.RowMappers.getDealerMapper()));
    }

    @Override
    protected Integer getId(com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer object) {
        return object.getId();
    }

    /**
     * Find records that have <code>code IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCode(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.CODE.in(values));
    }

    /**
     * Find records that have <code>code IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.CODE.in(values),limit);
    }

    /**
     * Find records that have <code>comercial_name IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByComercialName(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.COMERCIAL_NAME.in(values));
    }

    /**
     * Find records that have <code>comercial_name IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByComercialName(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.COMERCIAL_NAME.in(values),limit);
    }

    /**
     * Find records that have <code>level_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByLevelId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.LEVEL_ID.in(values));
    }

    /**
     * Find records that have <code>level_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByLevelId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.LEVEL_ID.in(values),limit);
    }

    /**
     * Find records that have <code>status_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByStatusId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.STATUS_ID.in(values));
    }

    /**
     * Find records that have <code>status_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByStatusId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.STATUS_ID.in(values),limit);
    }

    /**
     * Find records that have <code>parent_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByParentId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.PARENT_ID.in(values));
    }

    /**
     * Find records that have <code>parent_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByParentId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.PARENT_ID.in(values),limit);
    }

    /**
     * Find records that have <code>subchannel_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyBySubchannelId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.SUBCHANNEL_ID.in(values));
    }

    /**
     * Find records that have <code>subchannel_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyBySubchannelId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.SUBCHANNEL_ID.in(values),limit);
    }

    /**
     * Find records that have <code>internal_manager_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByInternalManagerId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.INTERNAL_MANAGER_ID.in(values));
    }

    /**
     * Find records that have <code>internal_manager_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByInternalManagerId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.INTERNAL_MANAGER_ID.in(values),limit);
    }

    /**
     * Find records that have <code>external_manager_id IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByExternalManagerId(Collection<Integer> values) {
        return findManyByCondition(Dealer.DEALER.EXTERNAL_MANAGER_ID.in(values));
    }

    /**
     * Find records that have <code>external_manager_id IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByExternalManagerId(Collection<Integer> values, int limit) {
        return findManyByCondition(Dealer.DEALER.EXTERNAL_MANAGER_ID.in(values),limit);
    }

    /**
     * Find records that have <code>commissioning_section IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCommissioningSection(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.COMMISSIONING_SECTION.in(values));
    }

    /**
     * Find records that have <code>commissioning_section IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCommissioningSection(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.COMMISSIONING_SECTION.in(values),limit);
    }

    /**
     * Find records that have <code>store_type IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByStoreType(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.STORE_TYPE.in(values));
    }

    /**
     * Find records that have <code>store_type IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByStoreType(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.STORE_TYPE.in(values),limit);
    }

    /**
     * Find records that have <code>company_type IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCompanyType(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.COMPANY_TYPE.in(values));
    }

    /**
     * Find records that have <code>company_type IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCompanyType(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.COMPANY_TYPE.in(values),limit);
    }

    /**
     * Find records that have <code>document_type IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDocumentType(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.DOCUMENT_TYPE.in(values));
    }

    /**
     * Find records that have <code>document_type IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDocumentType(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.DOCUMENT_TYPE.in(values),limit);
    }

    /**
     * Find records that have <code>document_number IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDocumentNumber(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.DOCUMENT_NUMBER.in(values));
    }

    /**
     * Find records that have <code>document_number IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDocumentNumber(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.DOCUMENT_NUMBER.in(values),limit);
    }

    /**
     * Find records that have <code>company_name IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCompanyName(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.COMPANY_NAME.in(values));
    }

    /**
     * Find records that have <code>company_name IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCompanyName(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.COMPANY_NAME.in(values),limit);
    }

    /**
     * Find records that have <code>address IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByAddress(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.ADDRESS.in(values));
    }

    /**
     * Find records that have <code>address IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByAddress(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.ADDRESS.in(values),limit);
    }

    /**
     * Find records that have <code>city IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCity(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.CITY.in(values));
    }

    /**
     * Find records that have <code>city IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCity(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.CITY.in(values),limit);
    }

    /**
     * Find records that have <code>province IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByProvince(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.PROVINCE.in(values));
    }

    /**
     * Find records that have <code>province IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByProvince(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.PROVINCE.in(values),limit);
    }

    /**
     * Find records that have <code>user_created IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserCreated(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.USER_CREATED.in(values));
    }

    /**
     * Find records that have <code>user_created IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserCreated(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.USER_CREATED.in(values),limit);
    }

    /**
     * Find records that have <code>user_updated IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserUpdated(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.USER_UPDATED.in(values));
    }

    /**
     * Find records that have <code>user_updated IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserUpdated(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.USER_UPDATED.in(values),limit);
    }

    /**
     * Find records that have <code>user_deleted IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserDeleted(Collection<String> values) {
        return findManyByCondition(Dealer.DEALER.USER_DELETED.in(values));
    }

    /**
     * Find records that have <code>user_deleted IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUserDeleted(Collection<String> values, int limit) {
        return findManyByCondition(Dealer.DEALER.USER_DELETED.in(values),limit);
    }

    /**
     * Find records that have <code>creation_date IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCreationDate(Collection<OffsetDateTime> values) {
        return findManyByCondition(Dealer.DEALER.CREATION_DATE.in(values));
    }

    /**
     * Find records that have <code>creation_date IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByCreationDate(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(Dealer.DEALER.CREATION_DATE.in(values),limit);
    }

    /**
     * Find records that have <code>update_date IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUpdateDate(Collection<OffsetDateTime> values) {
        return findManyByCondition(Dealer.DEALER.UPDATE_DATE.in(values));
    }

    /**
     * Find records that have <code>update_date IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByUpdateDate(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(Dealer.DEALER.UPDATE_DATE.in(values),limit);
    }

    /**
     * Find records that have <code>deletion_date IN (values)</code> asynchronously
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDeletionDate(Collection<OffsetDateTime> values) {
        return findManyByCondition(Dealer.DEALER.DELETION_DATE.in(values));
    }

    /**
     * Find records that have <code>deletion_date IN (values)</code> asynchronously limited by the given limit
     */
    public Single<List<com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer>> findManyByDeletionDate(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(Dealer.DEALER.DELETION_DATE.in(values),limit);
    }

    @Override
    public ReactiveRXQueryExecutor<DealerRecord,com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer,Integer> queryExecutor(){
        return (ReactiveRXQueryExecutor<DealerRecord,com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.pojos.Dealer,Integer>) super.queryExecutor();
    }
}
