/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables;


import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Dealers;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.Keys;
import com.dovaleac.guessing.game.jooq.jklingsporn.generated.tables.records.DealerStatusRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DealerStatus extends TableImpl<DealerStatusRecord> {

    private static final long serialVersionUID = -485327934;

    /**
     * The reference instance of <code>dealers.dealer_status</code>
     */
    public static final DealerStatus DEALER_STATUS = new DealerStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DealerStatusRecord> getRecordType() {
        return DealerStatusRecord.class;
    }

    /**
     * The column <code>dealers.dealer_status.id</code>.
     */
    public final TableField<DealerStatusRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dealers.dealer_status_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dealers.dealer_status.code</code>.
     */
    public final TableField<DealerStatusRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>dealers.dealer_status.description</code>.
     */
    public final TableField<DealerStatusRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>dealers.dealer_status</code> table reference
     */
    public DealerStatus() {
        this(DSL.name("dealer_status"), null);
    }

    /**
     * Create an aliased <code>dealers.dealer_status</code> table reference
     */
    public DealerStatus(String alias) {
        this(DSL.name(alias), DEALER_STATUS);
    }

    /**
     * Create an aliased <code>dealers.dealer_status</code> table reference
     */
    public DealerStatus(Name alias) {
        this(alias, DEALER_STATUS);
    }

    private DealerStatus(Name alias, Table<DealerStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private DealerStatus(Name alias, Table<DealerStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DealerStatus(Table<O> child, ForeignKey<O, DealerStatusRecord> key) {
        super(child, key, DEALER_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Dealers.DEALERS;
    }

    @Override
    public Identity<DealerStatusRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEALER_STATUS;
    }

    @Override
    public UniqueKey<DealerStatusRecord> getPrimaryKey() {
        return Keys.DEALER_STATUS_PKEY;
    }

    @Override
    public List<UniqueKey<DealerStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<DealerStatusRecord>>asList(Keys.DEALER_STATUS_PKEY);
    }

    @Override
    public DealerStatus as(String alias) {
        return new DealerStatus(DSL.name(alias), this);
    }

    @Override
    public DealerStatus as(Name alias) {
        return new DealerStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DealerStatus rename(String name) {
        return new DealerStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DealerStatus rename(Name name) {
        return new DealerStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
